ドキュメントという形で書くだけではプロセスが抜け落ちて良くないと言う考えから、
diaryという形で仕様に関する紆余曲折を記録していくことにした。
（恐らく誰もそんなことしてないと思うが、やったほうが良いと俺は思った）
こうしておくとあとになって技術ブログ化も出来ると思う。

## 現状
当初の予定通り、設計だけ考えて完全にAI駆動開発をしている。

強い思想: Go を Web 開発に採用する上で
https://zenn.dev/mpyw/scraps/70a85eb325158b
この記事にかなり厳しいGo批判があった。しかし、改善できないものじゃない、とも同時に思ったので、
ここに書かれてる注釈を100%素直に受け入れて改善していくことにした。
例えば、sqlcはやめてBunにしたし、スタックトレースを乗せるエラーハンドリングにしたし、
ログも統一的なやり方を早期に取り入れた。

とりあえずアカウント作成・ログイン・認証のごくごく最低限ができて、
テストもMakefileでコマンド一発でできるようにした。
ログも統一的なやり方でやるようにしたし、エラーもスタックトレース乗せるようになってる。

## テストについて
個人的な意見だが…DBをモックしてビジネスロジックだけをテストするというのをかつて仕事でやらされたことがあるが、
あれ、何の意味もないと思うし、実際それですり抜けるバグもあった。
何より、テストの手間が無意味にかかりすぎる。マイナスだけあって何のプラス要素もない。

APIを実際に呼び出し、テスト専用の本物のDBを使う。これが俺が考えるバックエンドのテストの大原則だと思う。
だからそうした。

## 認証について
簡単な認証なので全く完成でないが、既に作るのがつらすぎる。
ここから更にブルートフォース対策、二段階認証とか入れる事を考えると地獄が確定している。
Firebase AuthもしくはAWS Cognitoを使うしかないな…。
AWS Cognitoは5万人まで無料らしいので最も現実的だろう。
スマホ対応する事も考慮にいれるとログインはOIDCか、いずれにせよEmail認証はしない方が良い。
ローカルでやるならDockerのLocalStackを使おう。

## サーバーレスにしない理由
そもそもサーバーレスでやり切るのが個人開発のトレンドらしいが、
SNSはServerSentEvents,
対戦ゲームはWebSocketかWebRTC
だと思うし、これらってサーバーレスには極端に不向きらしい。
だから引き続きGoのginで作ることにした。
フロントエンドは、ReactだけかろうじてわかるのでReactでやる予定でいる。
