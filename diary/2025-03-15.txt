ドキュメントという形で書くだけではプロセスが抜け落ちて良くないと言う考えから、
diaryという形で仕様に関する紆余曲折を記録していくことにした。
（恐らく誰もそんなことしてないと思うが、やったほうが良いと俺は思った）
こうしておくとあとになって技術ブログ化も出来ると思う。

## 現状
当初の予定通り、設計だけ考えて完全にAI駆動開発をしている。

強い思想: Go を Web 開発に採用する上で
https://zenn.dev/mpyw/scraps/70a85eb325158b

この記事にかなり厳しいGo批判があった。しかし、改善できないものじゃない、とも同時に思ったので、
ここに書かれてる注釈を100%素直に受け入れて改善していくことにした。
例えば、sqlcはやめてBunにしたし、スタックトレースを乗せるエラーハンドリングにしたし、
ログも統一的なやり方を早期に取り入れた。

とりあえずアカウント作成・ログイン・認証のごくごく最低限ができて、
テストもMakefileでコマンド一発でできるようにした。
ログも統一的なやり方でやるようにしたし、エラーもスタックトレース乗せるようになってる。

## テストについて
個人的な意見だが…DBをモックしてビジネスロジックだけをテストするというのをかつて仕事でやらされたことがあるが、
あれ、何の意味もないと思うし、実際それですり抜けるバグもあった。
何より、テストの手間が無意味にかかりすぎる。マイナスだけあって何のプラス要素もない。
APIを実際に呼び出し、テスト専用の本物のDBを使う。もちろん使い捨ての扱い。
これが俺が考えるバックエンドのテストの大原則だと思う。
バックエンドの本質はDBにあり、DBは常に複雑な挙動をするのにそこで偽物のDBを使っても何の意味もない。
そして、DBのモックは再現するのが無意味に難しい上に間違いやすいし、
その結果何が正しくてなにが間違ってるとするのかというのも把握しにくい上に変化しやすい。
一方で、APIのテストに関しては、Request/Responseという2者がテストの主体になるが、
これは「変わりやすい・変わりにくい」以前に
「変わったのなら絶対にドキュメント化しなければならない」ような開発における主役で、
ここが変わったのならテストを書き換えるというのは極めて自然な行為だと自分は思う。

そういう背景がある。だからAPIテストをメインにすることにした。
当たり前だが、SaaSでエミュレートできないが必須だというものについては流石にテスト時だけモックして良いと思う。
DBは我々が定義したものでありビジネスロジックと一体化したものだが、SaaSはたいていそうではない。
この2つをごっちゃにするべきではないのだ。

## ぼやき
「コードでわかることをコメントに書かない」
「数行だけの関数は1度しか使わないなら無駄」
みたいな謎の言説に対してもよく考えることだが、
業界のベストプラクティスとか、権威的な人が言ってるとか、本に書いてあるとか、
そういう事情で全然意味のない事がまかり通ってるのがIT業界だと思っていて、
それは超スピードで急成長した世界だからもう仕方ない、そういうもんだと思ってる。
しかし、そういう事情に対してきちんと向き合わずに誰かが言ったことを鵜呑みにしても絶対に良いことはないと思うし、
自分は「DBをモックしてビジネスロジックだけをテストする」というやり方は、そういう意味で大反対している。

## 認証について
簡単な認証なので全く完成でないが、既に作るのがつらすぎる。
ここから更にブルートフォース対策、二段階認証とか入れる事を考えると地獄が確定している。
Firebase AuthもしくはAWS Cognitoを使うしかないな…。
AWS Cognitoは5万人まで無料らしいので最も現実的だろう。
スマホ対応する事も考慮にいれるとログインはOIDCか、いずれにせよEmail認証はしない方が良い。
ローカルでやるならDockerのLocalStackを使おう。

…色々考えたが、仕事のプロジェクトでFirebase Authを使う可能性が高く、
AWS Cognitoは仕事で使ったことがあるものの結構難解だったので、
最終的にFirebase Authにした。
Auth0, Clerkも比較対象に上がったが
「簡単なほうがいい」でAuth0, Cognito脱落
「仕事で使う可能性が高いほうがいい」でClerk脱落
消去法でFirebase Authに。
ローカルで動かす事もできるのが良い。
RDBを用意してしまったが、これが果たして要るのかも現時点では疑問だ…。
また、Firebaseで行くならそもそもAWSではなくGCPでもいいのかもしれない。
仕事という意味では遠くなるが、安いらしいというのと、
比較対象を経験すらしたことないというのは何か手痛い気がする。

## サーバーレスにしない理由
そもそもサーバーレスでやり切るのが個人開発のトレンドらしいが、
SNSはServerSentEvents,
対戦ゲームはWebSocketかWebRTC
だと思うし、これらってサーバーレスには極端に不向きらしい。
だから引き続きGoのginで作ることにした。
